* Convolution Neural Network
** History
   Evolution of *Artificial Neural Network* concept began with Warren McCulloch and Walter Pitts in 1943, when they devised mathematical model inspired by the biology of Neuron cell. This inspired the invention of *Perceptron*, created in 1958 by Frank Rosenblatt. *Perceptron* used very simple model of *Artificial Neuron* that was modeled based on biological *Neuron*. This model consist of variable number of weighted inputs which summed and squashed through nonlinear function to produce output (typically bounded between values (0,1) or (-1,1)).
   From the beginning *Perceptron* seamed promising, but it was soon discovered that it has severe limitations. These limitations prevent it from being used to classify even slightly more complicated problems. Most prominent voice of criticism was Marvin Minsky, who published book called Perceptrons. The criticism was centered on the fact that there was no efficient way how to effectively train *Perceptron* to solve complex problems. Among others the book contained mathematical proof that *Perceptron* is unable to solve simple XOR problem (in other words, it can only solve linearly separable problems). Even though according to Minsky this criticism wasn't malicious, it stifled the interest in Neural Networks for over a decade.
   Interest in NN was rejuvenated in the early 80 by the invention of *Backpropagation* learning algorithm, which enabled the possibility to use multiple Perceptrons to form networks. Perceptrons could also be stacked upon each other to form layers. Neural networks of this type are commonly called *Multilayer Perceptron*.
   This simple improvement addressed majority of previously raised concerns and enable the application of NN in many different technical domains with moderate success.
   In 80 and 90 the interest in NN plateaued again, and general research of AI was more focused on other (typically of less complex nature) machine learning techniques. In the realm of classification problems it were notably *Support Vector Machines* (SVM), *Ensemble methods* and *Decision trees* (*Random Forest*). AI research community also developed several other paradigms of *Neural Networks* that were similarly inspired by biology of human brain but took different approach. Notably *Self Organizing Maps* (SOM) and *Recursive Networks* (e.g. *Hopfields Networks*).
   By the year 2000 there was very few research facilities that were devoting enough attention to the Neural Networks. There was also certain disdain for Neural Networks in academia and AI research community. Success of Neural Networks that was promised almost half a century ago was finally encountered around 2006, when the first Networks with large number of hidden layers was successfully trained. This lead to mainstream adaption of umbrella term *Deep Learning* (specifically *Deep Neural Network*). The word deep signifies that depth (number of hidden layers) of these networks is large. The key theoretical insight was that to learn complicated functions that can represent high-level abstractions (e.g. vision, language understanding etc.) there is a need for deep architecture (deep in this context can mean number of layers in order of 10^1 to 10^3). Even though that progress of Neural Network into direction of structures with high number of hidden layers was obvious, its training was unsolved technical problem. There were basically two reason why this breakthrough didn't come sooner. Firstly there wasn't enough data to effectively train the *Neural Network*. Secondly the computational hardware until then wasn't powerful enough to train sufficiently large and complex networks and also the training methods used in *Multilayer Perceptron* weren't sufficient for deep networks.
   First problem was solved simply by availability of more data, which were obtained mainly thanks to effort of large companies (Google, Facebook, Youtube, etc.) but also with effort of large community of professionals and hobbyists of data science.
   Both innovation in computational hardware and improvement of training methods were needed to solve the second problem. One of the technical breakthroughs was utilization of *General-Purpose computing on Graphics Processing Units* (*GPGPU*). Thanks to the fact that training process of Neural Networks is typically large number of simple consequent computations, there is a great potential for parallelization (this is specifically true in case of *Convolutional neural networks*).

** Deep Learning in image processing
   It was found that *Multilayer Fully Connected Neural Networks* are not ideal for image processing needs. One of the main problems is that their structure doesn't have any means to capture the fundamental two-dimensional property of image data.
   Due to a high complexity of *Fully Connected Neural Network*, it is very difficult to train *Deep Neural Networks* for even small images. Complexity and computational demand grows exponentially with size of input data. For this reason there was developed new model of neural networks called *Convolutional Neural Networks*.

** Convolutional Neural Networks
*Convolutional Neural Network* (*CNN*) is specialized type of *Artificial Neural Network* that was originally used in image processing applications. Where was taken advantage of their two dimensional character. Since then they were also very successfully employed in natural language and video processing.
   Invention of CNNs was inspired by biology of human visual cortex. In human eye light falls on the cornea where photosensitive cells fire signal for individual neurons that are connected to these cells. Neurons in visual cortex are typically connected to only few photosensitive cells which translates into the fact that neurons react only to small portion of observed scene.
   Therefore *Convolutional Neural Networks* typically aren't fully connected. This has positive effect on computational complexity of network training. Usually complexity of training is rising proportionally (and not exponentially opposed to classical *Fully Connected Neural Networks*) to number of inputs.
*** Structure of *CNN*
    Structure of Convolutional networks is typically composed of three different types of layers. Layer can be of *Convolutional*, *Pooling* and *Fully-connected* type. Network layers can pretty much arbitrarily combine these three types of layers (with exception of Fully-Connected layers, which always have to come last). Each type of layer has different rules for signal forward and error backward propagation.

**** Convolutional layer
     As the name suggest this layer employs convolution. In the convolution terminology first parameter is called *input*, second parameter is called *kernel* and the output is typically called *feature map*. Input into Convolutional layer is either image (in case of first network layer) or *feature map* from previous layer. *Kernel* is typically of square shape and its width can range from 3 to N pixels. *Feature map* is created by convolution of *kernel* over each specified element of *input* (this is specified by *stride*, see next).

     Depending on the size of *kernel* and layer's *padding* preferences the process of convolution can produce *feature map* of different size than *input*. When the size of output should be preserved it is necessary to employ *zero padding* on the edges of *input*. *Zero padding* in this case has to add as many zero elements so the convolution operation can be performed on the edge of *input*. In opposite case the *feature map* is reduced by the missing elements.
     Decreasing of the *feature map* can be in some cases desirable. In this case is during convolution applied *stride* to determine how many *input* elements should be skipped in each step during traversal (when the *stride* is 1 the size of *feature map* is not affected).

     Each Convolutional layer is typically composition of several different *kernels*. In other words output of this layer is tensor containing *feature map* for each used kernel. Each of these  is designed to underline different features of input image. In the first layers these features are typically edges. In following layers the higher the layer the more complex features are captured.

     The fact that each convolution on *input* is using one *kernel* (_don't confuse this with use of multiple *kernels* in previous paragraph_) basically means that all connections between two neighboring layers are sharing the same weights. This might not be sufficient in some applications and there fore there is possibility to use two other types of connections. *Locally connected* which basically means that applied *kernel* is of the same size as the *input* and *tiled convolution* which means alternation of more than one set of weights on entire *input*.

**** Pooling layer
     This layer is used to down sample size of the *input* layer. Sometimes this is called the *detector* stage. Output from this layer is created by various combination of *input*. Max-pooling is one of the more prevalent examples. The input is divided into equal rectangular subelements of size larger than 1. Output from each subelement is then selected as maximal value of its individual elements. This decreases the size of output layer while preserving information contained in input layer and effectively compresses contained information.

**** Fully-Connected layer
     Fully-Connected layer is typical layer from classical *Feed-forward fully connected Neural Network* and it is always located on the end of the layer stack. In other words it is never followed by another Convolutional layer. Utility of multiple fully connected layers at the end of the CNN stack is in some literature questioned.

*** Training
    Training of CNN if analogical to Fully Connected Neural Network in that both are using *Gradient Decent Methods*. Situation with *CNN* is more complicated because network is composed of layers of different types and therefore training technique must accommodate for variability between different layers.
